<hibernate-configuration>
	<session-factory>
		<!-- Configuración de conexión a la base de datos -->
		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
		<property name="connection.url">jdbc:mysql://localhost:3306/bdhotelessegunda
		</property>
		<property name="connection.username">root</property>
		<property name="connection.password" />
		<!-- Pool de conexiones JDBC (se usa la que viene por defecto) -->
		<property name="connection.pool_size">1</property>
		<!-- Dialecto SQL -->
		<property name="dialect">org.hibernate.dialect.MySQL57Dialect
		</property>
		<!-- Muestra en la consola todas las consultas SQL ejecutadas -->
		<property name="show_sql">true</property>
		<!-- Valores Posibles 
			validate: validate that the schema matches, make no changes to the schema of the database,
			 you probably want this for production. 
			update: update the schema to reflect the entities being persisted 
			create: creates the schema necessary for your entities, destroying any previous data. 
			create-drop: create the schema as in create above, but also drop the schema 
			at the end of the session. This is great in early development or for testing. -->
		<property name="hbm2ddl.auto">validate</property>
		<!-- Mapea las siguientes clases anotadas si trabajásemos con mapeo XML 
			en lugar de class pondríamos resource -->
		<mapping class="aed.hibernate.classes.Clientes" />
		<mapping class="aed.hibernate.classes.Hoteles" />
		<mapping class="aed.hibernate.classes.Habitaciones" />
		<mapping class="aed.hibernate.classes.Regimenes" />
		<mapping class="aed.hibernate.classes.Estancias" />
		<mapping class="aed.hibernate.classes.HabitacionesObservaciones" />
		<!-- la siguiente linea solo en el caso de usar mapeo con ficheros xml -->
		<!-- <mapping resource="Persona.hbm.xml"/> -->
	</session-factory>
</hibernate-configuration>